import{_ as a,c as l,a as n,d as p,b as e,o,r as c}from"./app.e02fc783.js";const m=JSON.parse('{"title":"起步","description":"","frontmatter":{},"headers":[{"level":2,"title":"webpack.config.js","slug":"webpack-config-js","link":"#webpack-config-js","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"relativePath":"start/start.md","lastUpdated":1675065259000}'),t={name:"start/start.md"},r=e(`<h1 id="起步" tabindex="-1">起步 <a class="header-anchor" href="#起步" aria-hidden="true">#</a></h1><h2 id="webpack-config-js" tabindex="-1">webpack.config.js <a class="header-anchor" href="#webpack-config-js" aria-hidden="true">#</a></h2><p>项目根目录新建<code>webpack.config.js</code>，该文件名是webpack默认配置文件名，webpack会使用其中的配置信息进行打包</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// webpack是基于node.js执行的，所以可以使用node.js的路径解析模块path</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 入口</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./src/main.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 输出文件路径</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;dist&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#7F848E;font-style:italic;">// resolve方法，该方法的作用是将方法参数解析成一个绝对路径返回，__dirname是Node.js的一个全局变量，表示当前文件的路径。这样，path.resolve(__dirname, &#39;&#39;)表示的其实就是当前文件夹根目录的绝对路径</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 输出文件名</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bundle.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 自动清空上次打包的内容</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 原理：在打包前，将path目录整个目录内容清空，再进行打包</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">clean</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 模块</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">module</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 配置loader</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">rules</span><span style="color:#ABB2BF;">: []</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 插件</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 打包模式</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;production&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>现在只需要一行命令即可打包，会自动使用<code>webpack.config.js</code>的配置</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">  npx </span><span style="color:#98C379;">webpack</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,7);function B(i,y,b,d,u,F){const s=c("git-talk");return o(),l("div",null,[r,n(s),p(),n(s)])}const h=a(t,[["render",B]]);export{m as __pageData,h as default};
